## New patch (empty) - add @@FILE / @@CMD then Ctrl+S
## Example:
## @@CMD composer dump-autoload -o
## @@FILE src/Controller/PingController.php
## <?php
## // your code here
## @@END
## --- CLEANUP GLOBAL ---

## 1) Retirer l'attribut lecture seule sur anciens listeners (si mis) puis supprimer
@@CMD attrib -R tools\patch-runner.ps1 2>$null
@@CMD attrib -R tools\watch.ps1 2>$null
@@CMD attrib -R tools\live-patch-listener.ps1 2>$null
@@CMD Remove-Item tools\patch-runner.ps1 -Force -ErrorAction SilentlyContinue
@@CMD Remove-Item tools\watch.ps1 -Force -ErrorAction SilentlyContinue
@@CMD Remove-Item tools\live-patch-listener.ps1 -Force -ErrorAction SilentlyContinue

## 2) Supprimer dossiers/artefacts de test
@@CMD Remove-Item tools\logs -Recurse -Force -ErrorAction SilentlyContinue
@@CMD Remove-Item tools\temp -Recurse -Force -ErrorAction SilentlyContinue
@@CMD Remove-Item .\gen-jwt-keys.php -Force -ErrorAction SilentlyContinue
@@CMD Remove-Item .\applypatch.bat -Force -ErrorAction SilentlyContinue
@@CMD Remove-Item .\setup_api.bat -Force -ErrorAction SilentlyContinue

## 3) Supprimer contrôleurs de test éventuels
@@CMD Remove-Item .\src\Controller\PingController.php -Force -ErrorAction SilentlyContinue

## 4) Figer la version de notre runner APPLY (robuste ASCII)
@@FILE tools/apply-from-patch.ps1
param([string]$Patch = "patch.txt")
$ErrorActionPreference = "Stop"
if (-not (Test-Path $Patch)) { Write-Error "Patch not found: $Patch"; exit 1 }

$raw = Get-Content -Raw -Encoding UTF8 $Patch
$lines = $raw -split "`r?`n"
$i = 0

function Ensure-Dir($p){ $d = Split-Path -Parent $p; if($d){ if(-not (Test-Path $d)){ New-Item -ItemType Directory -Force -Path $d | Out-Null } } }

while ($i -lt $lines.Count) {
  $line = $lines[$i]
  if ([string]::IsNullOrWhiteSpace($line)) { $i++; continue }
  $t = $line.TrimStart()
  if ($t.StartsWith("##")) { $i++; continue }

  if ($line.StartsWith("@@FILE ")) {
    $path = $line.Substring(7).Trim().Trim('"')
    $i++
    $buf = New-Object System.Collections.Generic.List[string]
    while ($i -lt $lines.Count -and $lines[$i] -ne "@@END") { $buf.Add($lines[$i]); $i++ }
    if ($i -ge $lines.Count) { throw "Missing @@END for " + $path }
    $content = [string]::Join("`r`n", $buf)
    Ensure-Dir $path
    $enc = New-Object System.Text.UTF8Encoding($false)
    [IO.File]::WriteAllText($path, $content, $enc)
    Write-Host "✔ Wrote $path" -ForegroundColor Green
    $i++
    continue
  }

  if ($line.StartsWith("@@CMD ")) {
    $cmd = $line.Substring(6)
    if ([string]::IsNullOrWhiteSpace($cmd)) { throw "Empty @@CMD" }
    Write-Host "→ $cmd" -ForegroundColor Cyan

    $global:LASTEXITCODE = 0
    $oldEA = $ErrorActionPreference
    $ErrorActionPreference = "Stop"
    try {
      iex $cmd
      if (-not $?) { throw "Command failed: $cmd" }
      if ($LASTEXITCODE -ne $null -and $LASTEXITCODE -ne 0) { throw "Command failed (exit $LASTEXITCODE): $cmd" }
    } catch {
      throw $_
    } finally {
      $ErrorActionPreference = $oldEA
    }
    $i++
    continue
  }

  Write-Host "(ignored) $line" -ForegroundColor DarkGray
  $i++
}

Write-Host "✅ Patch terminé." -ForegroundColor Green
@@END

## 5) Figer notre watcher POLLING auto-reset (sans $using: et sans boucler)
@@FILE tools/watch-poll.ps1
param(
  [string]$PatchFile = "patch.txt",
  [int]$IntervalMs = 500,
  [switch]$RunOnceAtStart = $true,
  [switch]$AutoClearOnSuccess = $true
)
$ErrorActionPreference = "Stop"
function Info($m){ Write-Host ("[ " + (Get-Date -Format "HH:mm:ss") + " ] " + $m) -ForegroundColor Cyan }
function Ok($m){ Write-Host ("[ " + (Get-Date -Format "HH:mm:ss") + " ] " + $m) -ForegroundColor Green }
function Err($m){ Write-Host ("[ " + (Get-Date -Format "HH:mm:ss") + " ] " + $m) -ForegroundColor Red }

if (-not (Test-Path $PatchFile)) { New-Item -ItemType File -Path $PatchFile | Out-Null }
$script:Full = (Resolve-Path $PatchFile).Path
$script:ApplyScript = Join-Path (Get-Location) "tools\apply-from-patch.ps1"
$script:AutoClear = [bool]$AutoClearOnSuccess
$script:prev = (Get-Item $script:Full).LastWriteTimeUtc

function Write-Template {
  $tpl = @(
    "## New patch (empty) - add @@FILE / @@CMD then Ctrl+S",
    "## Example:",
    "## @@CMD composer dump-autoload -o",
    "## @@FILE src/Controller/PingController.php",
    "## <?php",
    "## // your code here",
    "## @@END"
  )
  Set-Content -Encoding UTF8 $script:Full $tpl
  $script:prev = (Get-Item $script:Full).LastWriteTimeUtc
  Ok "patch.txt cleared (template written)"
}

function ApplyOnce {
  try {
    Info ("Applying " + $script:Full)
    & powershell -NoProfile -ExecutionPolicy Bypass -File $script:ApplyScript -Patch $script:Full
    $code = $LASTEXITCODE
    if ($code -eq 0) {
      Ok "Patch applied"
      if ($script:AutoClear) { Write-Template }
    } else {
      Err ("Patch failed (exit " + $code + ")")
    }
  } catch { Err ("Exception: " + $_.Exception.Message) }
}

Info ("Polling " + $script:Full + " every " + $IntervalMs + "ms  (Ctrl+C to stop)")
if ($RunOnceAtStart) { ApplyOnce }
while ($true) {
  Start-Sleep -Milliseconds $IntervalMs
  try { $cur = (Get-Item $script:Full).LastWriteTimeUtc } catch { continue }
  if ($cur -ne $script:prev) {
    $script:prev = $cur
    ApplyOnce
  }
}
@@END

## 6) Lanceur pratique
@@FILE tools/start-watcher.bat
@echo off
powershell -NoProfile -ExecutionPolicy Bypass -File tools\watch-poll.ps1
@@END

## 7) .gitignore propre (évite de commit vendor, var, DB SQLite, clés JWT, IDE)
@@FILE .gitignore
/vendor/
/var/
/config/jwt/*.pem
/.env.local
/.idea/
/.vscode/
/node_modules/
/tools/patches/
/tools/logs/
/tools/temp/
@@END

## 8) Finitions : autoload + cache
@@CMD composer dump-autoload -o
@@CMD php bin/console cache:clear
@@CMD php bin/console cache:warmup

## 9) (Optionnel) Commit du clean-up
@@CMD git rev-parse --is-inside-work-tree 2>$null; if ($LASTEXITCODE -ne 0) { git init }
@@CMD git add -A
@@CMD git commit -m "chore: cleanup patch system and remove test artefacts" 2>$null
